 

* introduction 

Enhanced Mitigation Experience Toolkit (EMET) employs various methods to 
mitigate exploitation of memory corruption vulnerabilities. One of those 
methods is called Export Address Table Filtering (EAF) which restricts 
access to the Export Address Table of specific modules with API required 
to successfully compromise a host. EAF+ also provides some measure of 
protection against resolving API in the Import Address Table (IAT). 

* api name -> hash -> ordinal -> GetProcAddress(ordinal) -> api address 

Fido shows us how to bypass EMET by resolving GetProcAddress in the IAT 
of executable or external DLL and resolving the remaining API by passing 
API strings to GetProcAddress. 

The following code is accessing the EAT. 

See exports.png 

At line 76, EMET will break on execution of this statement to 
investigate the code and try detect if the code executing it is 
malicious. However, Lines 77 and 78 will execute without any 
interference because of no breakpoints. EMET will monitor access to 
AddressOfFunctions but not AddressOfNames or AddressOfNameOrdinals so we 
can still use them. 

To continue using hashes for API address resolution. Use the method of 
obtaining GetProcAddress + LoadLibraryA (if required) shown in Fido. But 
instead of using strings passed to GetProcAddress, hash the strings in 
EAT and pass the ordinal to GetProcAddress which will still return the 
address of API. 

* Brute Force 

Loop through all ordinals for an API address. 

